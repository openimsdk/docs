"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[43355],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),b=a,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||o;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},34642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});r(67294);var n=r(3905);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}const i={sidebar_position:1,title:"Callback Description",hide_title:!0},s="\ud83d\udcde Callback Description",c={unversionedId:"webhooks/introduction",id:"webhooks/introduction",title:"Callback Description",description:"\ud83d\udce2 OpenIM offers powerful callback functionalities. When a specific event happens before or after a process, OpenIMServer proactively sends an HTTP/HTTPS request to the APP\u2019s business server. This allows the APP\u2019s business server to intervene in the subsequent processing of that event or to perform data synchronization based on the callback.",source:"@site/i18n/en/docusaurus-plugin-content-docs-restapi/current/webhooks/introduction.mdx",sourceDirName:"webhooks",slug:"/webhooks/introduction",permalink:"/restapi/webhooks/introduction",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/introduction.mdx",tags:[],version:"current",lastUpdatedAt:1746609795,formattedLastUpdatedAt:"May 7, 2025",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Callback Description",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Send Business Notification",permalink:"/restapi/apis/messageManagement/send_business_notification"},next:{title:"Callback Example",permalink:"/restapi/webhooks/example"}},p={},u=[{value:"\ud83d\udcd1 Callback Classification",id:"-callback-classification",level:2},{value:"\u2699\ufe0f Configuration Description",id:"\ufe0f-configuration-description",level:2},{value:"\ud83d\udd04 Callback Protocol",id:"-callback-protocol",level:2},{value:"Sample Request URL",id:"sample-request-url",level:3},{value:"Request Parameter Description",id:"request-parameter-description",level:3},{value:"Header",id:"header",level:3}],d={toc:u},b="wrapper";function m(e){var{components:t}=e,r=l(e,["components"]);return(0,n.kt)(b,o(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){a(e,t,r[t])}))}return e}({},d,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-callback-description"},"\ud83d\udcde Callback Description"),(0,n.kt)("p",null,"\ud83d\udce2 ",(0,n.kt)("strong",{parentName:"p"},"OpenIM")," offers powerful callback functionalities. When a specific event happens before or after a process, OpenIMServer proactively sends an HTTP/HTTPS request to the APP\u2019s business server. This allows the APP\u2019s business server to intervene in the subsequent processing of that event or to perform data synchronization based on the callback."),(0,n.kt)("h2",{id:"-callback-classification"},"\ud83d\udcd1 Callback Classification"),(0,n.kt)("p",null,"Callbacks are divided into two main types based on the timing of their processing:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u2022   \ud83d\udeab **Callbacks Before the Event Occurs**: These \u201cbefore\u201d type callbacks allow the APP\u2019s business server to intervene in the event handling process. For example, you can implement sensitive word filtering for messages. OpenIMServer determines subsequent steps based on the callback response.\n\u2022   \ud83d\udce4 **Notifications After the Event Occurs**: These \u201cafter\u201d type callbacks are mainly used to notify the APP\u2019s business server for data synchronization. For example, when a user joins a group. In this case, OpenIMServer ignores the callback\u2019s return values and error codes.\n")),(0,n.kt)("h2",{id:"\ufe0f-configuration-description"},"\u2699\ufe0f Configuration Description"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"url: http://127.0.0.1:10006/callbackExample\nbeforeSendSingleMsg:\n  enable: false\n  timeout: 5\n  failedContinue: true\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u2022   url: The APP business server callback address, supports HTTP/HTTPS\n\u2022   enable: Whether to enable the callback, true for enable\n\u2022   timeout: Response timeout in seconds\n\u2022   failedContinue: Whether to continue the process if the callback times out or if the API fails. Generally effective for before type callbacks. true means to continue execution.\n")),(0,n.kt)("h2",{id:"-callback-protocol"},"\ud83d\udd04 Callback Protocol"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"OpenIMServer")," uses a third-party callback mechanism based on HTTP/HTTPS protocol. When initiating a callback request, OpenIMServer sends a POST request to notify the APP\u2019s business server. The specifics of these requests are directly included in the request body."),(0,n.kt)("h3",{id:"sample-request-url"},"Sample Request URL"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-plaintext"},"{WEBHOOK_ADDRESS}/callbackCommand?contenttype=json\n")),(0,n.kt)("h3",{id:"request-parameter-description"},"Request Parameter Description"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"{WEBHOOK_ADDRESS}"),(0,n.kt)("td",{parentName:"tr",align:null},"The url field in webhooks.yml, domain or hostname, for example: ",(0,n.kt)("a",{parentName:"td",href:"http://127.0.0.1:10006/callbackExample"},"http://127.0.0.1:10006/callbackExample"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"callbackCommand"),(0,n.kt)("td",{parentName:"tr",align:null},"The callback command, refer to each callback method\u2019s description for details")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"contenttype"),(0,n.kt)("td",{parentName:"tr",align:null},"The request input type, json")))),(0,n.kt)("h3",{id:"header"},"Header"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Header Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Example Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"operationID"),(0,n.kt)("td",{parentName:"tr",align:null},"123456"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"string"),(0,n.kt)("td",{parentName:"tr",align:null},"Used for global link tracking, recommended to use timestamps, unique in each request")))))}m.isMDXComponent=!0}}]);